---
title:  "An Interactive Scatterplot Using Observables"
execute:
  echo: false
---

## Introduction

It is not hard to learn to use [Observables](https://observablehq.com) to perform data anlysis and produce interactive graphs like the one shown below.

If you would like to enhance your project website with Observables, give it a try!  Setting up an account is free.

## The Plot

The plot below is based on data from the 2005 Cherry Blossom Race.  For documentation see [here](https://rdrr.io/cran/mosaicData/man/TenMileRace.html).

The user can choose the sex of the runners plotted, and the opacity of the points.  (The latter feature is useful, as over-plotting is an issue in this dataset.)


```{ojs}
//| output: false
race = {
  const race = await FileAttachment("TenMileRace.csv").csv({typed: true});
  race.forEach(function(runner) {runner.timeMinutes = runner.time / 60;});
  return race;
}
```


```{ojs}
minTime = d3.min(d3.map(race, d => d.timeMinutes))
```

```{ojs}
maxTime = d3.max(d3.map(race, d => d.timeMinutes))
```

```{ojs}
minAge = d3.min(d3.map(race, d => d.age))
```

```{ojs}
maxAge = d3.max(d3.map(race, d => d.age))
```
    
    





```{ojs}
//| panel: input
viewof sex = Inputs.select(["F", "M"], {label: "Sex of runner: "})
viewof opacity = Inputs.range([0, 1], {label: "Opacity: ", step: 0.01})
```





```{ojs}
Plot.plot({
  inset: 8,
  grid: true,
  marks: [
    Plot.dot(
      d3.filter(race, d => d.sex == sex), 
      {x: "age", y: "timeMinutes", fill: "black", fillOpacity: opacity}
    )
  ],
  x: {domain: [minAge, maxAge]},
  y: {label: "time (minutes)", domain: [minTime, maxTime]},
})
```

## Non-interactive Alternatives

To investigate the relationship of age, time and sex all at once, it might be preferable to include `sex` as an aesthetic property in the graph.  The over-plotting could also be addressed by a different sort of glyph:  density contours, for example, rather than points.  Below is a non-interactive graph of the data:

```{ojs}
Plot.plot({
  marks: [Plot.density(
    race.map(d => ({age: d.age, timeMinutes: d.timeMinutes, sex: d.sex == "M" ? "male" : "female"})), 
    {x: "age", y: "timeMinutes", stroke: "sex"}
  )],
  y: {label: "time (minutes)"},
  color: {legend: true}
})
```

Since the density contours of the two sexes overlay each other somewhat, it may be best to facet by `sex` rather than making it an aesthetic property of our glyphs:

```{ojs}
Plot.plot({
  marks: [
    Plot.frame(),
    Plot.density(
      race.map(d => ({
        age: d.age, 
        timeMinutes: d.timeMinutes, 
        sex: d.sex == "M" ? "male" : "female"
      })), 
      {x: "age", y: "timeMinutes", fx: "sex"}
    )],
  y: {label: "time (minutes)"},
  facet: {label: null},
  nice: true
})
```



## Notes

This work was first done as a [Notebook](https://observablehq.com/d/1664118c11075582) on the [Observable](https://observablehq.com) site.  It is often easiest to do one's development there, then transfer the code to Quarto for publication.

The version of Plot provided with Quarto often lags well behind the latest version as [documented](https://observablehq.com/plot/) by Observables.  In order to keep your Quarto project current with what works in your Observables notebooks, it is advisable to import the latest version of Plot, like this:

```{ojs}
Plot = import("https://esm.run/@observablehq/plot")
```