[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello, I’m Homer! I’m a professor of Mathematics and Computer Science, and I’m the instructor for CSC 324."
  },
  {
    "objectID": "about.html#early-life",
    "href": "about.html#early-life",
    "title": "About Me",
    "section": "Early Life",
    "text": "Early Life\nI’m a Southerner, born in Georgia and raised in Durham, North Carolina. From an early age I was interested in science and mathematics, and discovered philosophy at age twelve, reading first some of the dialogues of Plato and then moving on to Freiderich Nietzche. I doubt that at the time I understood much of Nietzche beyond Thus Spake Zarathustra, but these early encounters with philosophers awoke in me a great central, guiding Question:\n\nHow does the Universe work, at its most fundamental levels?"
  },
  {
    "objectID": "about.html#studies",
    "href": "about.html#studies",
    "title": "About Me",
    "section": "Studies",
    "text": "Studies\nI went up North for College, majoring in Philosopy at Princeton University. My great loves were mathematical logic, the foundations of mathematics, metaphysics and Ancient Philosophy, especially Aristotle. The professor to whom I felt closest was the late Michael Frede.\nFor my graduate studies I turned to Mathematics, taking a PhD at the University of North Carolina at Chapel Hill, not far from where I grew up. I worked in ergodic theory, which is more or less the study of the long-run orderly properties of dynamical systems that might appear quite chaotic and unpredictable in the short run. Along the way I became acquainted with the writings of the great Roman Catholic monk and author Thomas Merton, who lived at the Abby of Gethsamani in Kentucky, about an hour’s drive West of Georgetown College. Under the influence of Merton my Question shifted from “How does the Universe work at its most fundamental levels?” to:\n\nHow might we experience God, not in some future life but here and now, and not just personally but also in community?"
  },
  {
    "objectID": "about.html#putting-things-into-practice",
    "href": "about.html#putting-things-into-practice",
    "title": "About Me",
    "section": "Putting Things Into Practice",
    "text": "Putting Things Into Practice\nI became active in the Catholic Worker Movement, a loose network of houses of hospitality all over the country that are devoted to voluntary poverty, service of the poor, and action for peace and social justice. One of their founders was Dorothy Day, a mentor of Thomas Merton. She was also a prominent author. If you get a chance, read her autobiography The Long Loneliness.\nDuring that time I was also involved, through the Catholic Worker, with the Plowshares Movement, taking part in numerous demonstrations against the nuclear arms race, spending a fair amount of time—during extended breaks from my mathematical studies—in prison for civil disobedience. I was mamber of the Thames River Plowshares. To the left is a picture taken of us a few weeks after our action, which took place on September 2, 1989. At that time I was twenty-seven years old and newly-married.\nA couple of years later I finished my doctorate in Mathematics. My wife and I considered staying in North Carolina to help found a Catholic Worker House there, but eventually we decided that I should make use of my studies and teach Mathematics. In 1991 I took a position at Pikeville College in Eastern Kentucky, not far from where my grandparents had worked as coal miners. In 1996 we moved to Georgetown College."
  },
  {
    "objectID": "about.html#life-at-georgetown",
    "href": "about.html#life-at-georgetown",
    "title": "About Me",
    "section": "Life At Georgetown",
    "text": "Life At Georgetown\nAt Georgetown I have pursued the history of matheamtics, statistics and, of course, computer programming, especially for data analysis. The history of mathematics, along with an interest—inspired by Thomas Mertcon—in Asian religions, led me to the study of Sanskrit, the scholarly classical language of India.\nSomewhat in connection with my studies in Sanskrit and my reading of Thomas Merton, I am a long-time practitioner of Ashtanga Yoga; in fact I taught it several times as a KHS activity class at Georgetown. To the right is an old picture of me teaching one of those classes. I appear to be coming down out of the posture known as utpluthihi, and offering advice to some students out of the camera to my right. In addition to Ashtanga Yoga I enjoy weight-lifting and working in our backyard garden and at Twisted Trunk, the community garden on the Georgetown Campus that I helped found in 2009. And lately I and my family have come to love very much the company of dogs. We have a wonderful, compact pit-bull mix named Demi."
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "TODO: Suitable introductory remarks about articles."
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Advent Solution in the Browser",
    "section": "",
    "text": "This article is an application of the Advent of Code 2022 Day 1 solution to the context of the browser.\nTo see it in action, you would create a properly-formatted input file. That is, each line would contain just one number, or would be blank to indicate separation between packs. Save the file somewhere on your computer and then use the input-field below to select it.\n\n\nAfter you select your file, the max pack-total will appear here!\n\nThe relevant JavaScript file is here. Use the Web Inspector tool on your browser to identify the elements on the html page that are accessed by the code.\nNote: You do not have to implement any of yuor Eloquent JavaScript solutions in the browser. I wrote this article only to teach myself about reading user-provided files in the browser."
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "Advent of Code 2022, Day 1: A Solution Using Javascript",
    "section": "",
    "text": "We describe a solution, in the JavaScrpt running in the Node environment, to the Day 1 problem of the 2022 edition of the highly-popular Advent of Code challenge.\nThe problem is described in full here. (The reader may need to create an account in order to view it.) A band og eleves is on a quest to provide energy to santa’s reindeer. Their quest begins with a hike through a jungle area. Below is an excerpt from the Advent of Code website that describes the problem.\n\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nThis list represents the Calories of the food carried by five Elves:\n\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories.\nThe second Elf is carrying one food item with 4000 Calories.\nThe third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories.\nThe fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories.\nThe fifth Elf is carrying one food item with 10000 Calories.\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\nA complete solution to the problem may be found here. In the remainder of the article we provide a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_01.html#introduction-to-the-problem",
    "href": "articles/article_01.html#introduction-to-the-problem",
    "title": "Advent of Code 2022, Day 1: A Solution Using Javascript",
    "section": "",
    "text": "We describe a solution, in the JavaScrpt running in the Node environment, to the Day 1 problem of the 2022 edition of the highly-popular Advent of Code challenge.\nThe problem is described in full here. (The reader may need to create an account in order to view it.) A band og eleves is on a quest to provide energy to santa’s reindeer. Their quest begins with a hike through a jungle area. Below is an excerpt from the Advent of Code website that describes the problem.\n\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves’ expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they’ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf’s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items’ Calories and end up with the following list:\n1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000\nThis list represents the Calories of the food carried by five Elves:\n\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories.\nThe second Elf is carrying one food item with 4000 Calories.\nThe third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories.\nThe fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories.\nThe fifth Elf is carrying one food item with 10000 Calories.\n\nIn case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they’d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\n\nA complete solution to the problem may be found here. In the remainder of the article we provide a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_01.html#reading-in-the-data",
    "href": "articles/article_01.html#reading-in-the-data",
    "title": "Advent of Code 2022, Day 1: A Solution Using Javascript",
    "section": "Reading in the Data",
    "text": "Reading in the Data\nSuppose that the problem data is contained in a file called input.txt located in the same dirctory as the JavaScript file.\nWe will be importing data from a source outside the Node envionment, so we’ll be working with file-systems. Accordingly, we import the fs and path modules:\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nDetermining the Pathname of the Input File\nWe now use the functionality of the path module to construct a string that gives the pathname of the input.txt file.\nlet targetFile = path.resolve(__dirname, \"input.txt\");\nIn the above code, __dirname evaluates to the full name of the directory containing the file being run, and path.resolve puts it together with the second argument to get the full pathnamename of the input file.\n\n\nReading in the Input File\nNext, we use the fs module tp read in the file, and the we and convert it to a string:\nconst input = fs.readFileSync(targetFile).toString();\n\n\nProcessing the Input File\nWe wish to convert the string into an array of values, where each element of the array is the calorie-value of an item.\nTo this end, we must split the string along the newlines within it. To this end we define a splitting function:\nconst splitLines = str =&gt; str.split(/\\n/);\nNote the use of the Javacript regular expression /\\n/). (In Javascript regular expressions to not start life as strings, as they do in R. Instead they are a special type of object, delimited by the forward-slash: /. For more on regular expressions in JavaScript, see Chapter 8 of the Eloquent JavaScript textbook.)\nWe now apply the function to split the input into an array of strings;\nconst caloriesAsStrings = splitLines(input);\nThe array is full of strings. (Some of them are the empty strinf—wherever there were two consecutive newlines in the oringal input to separate the pack of one elf from the pack of the next elf.)\nWe need to convert them to numbers. To that end, we apply the higher-order array-method map() to the caloriesAsStrings:\nconst calories = caloriesAsStrings.map(str =&gt; parseInt(str));\nIt is important to note that parseInt() converts the empty string to the value NaN: “not a number”."
  },
  {
    "objectID": "articles/article_01.html#looping-to-compute-pack-totals",
    "href": "articles/article_01.html#looping-to-compute-pack-totals",
    "title": "Advent of Code 2022, Day 1: A Solution Using Javascript",
    "section": "Looping to Compute Pack-Totals",
    "text": "Looping to Compute Pack-Totals\nThe array calories consists of calorie counts, with NaNs separatng items in different packs. We’ll work with this array to find the sums of the calorie-counts in each pack.\nFirst, we make an array to hold the total calories for each pack:\nconst packTotals = [];\nOne by one, we pull items from the beginning of the calories array, making the pack totals:\nwhile (calories.length &gt; 0) {\n  let packTotal = 0;\n  let currentItem = calories.shift();\n  while (!isNaN(currentItem)) {\n    packTotal += currentItem;\n    currentItem = calories.shift();\n  }\n  packTotals.push(packTotal);\n};\npackTotals is now an array of the total calories in each pack."
  },
  {
    "objectID": "articles/article_01.html#reporting-the-maximum-pack-total",
    "href": "articles/article_01.html#reporting-the-maximum-pack-total",
    "title": "Advent of Code 2022, Day 1: A Solution Using Javascript",
    "section": "Reporting the Maximum Pack-Total",
    "text": "Reporting the Maximum Pack-Total\nFinally, we compute the maximum of the pack totals:\nlet maxPackTotal = Math.max(...packTotals);\n(Math.max() takes as arguments all of the numbers of whihc we wish to find the maximum. Note the use of the three-dot notation notation ... to convert the single array into separate arguments. For a review of the three-dot notation, see the section Rest Parameters in Eloquent JavaScript. )\nFinally, we report the maximum to the console:\nconsole.log(maxPackTotal);\nWe are done!"
  },
  {
    "objectID": "articles/battleship/index.html",
    "href": "articles/battleship/index.html",
    "title": "Battleship with Canvas",
    "section": "",
    "text": "Here is a simple game of Battleship!\nYou play against the computer. Select a point at which to drop a bomb by clicking in the computer’s area, which is the upper part of the above “ocean”. The bomb explodes, and any ship that is within a set radius of the point of explosion sustains a hit. Each ship has a hit-capacity; when it takes a number of hits equal to its capacity it is sunk.\nThe game is a work in progress (see the Github repository). It is implemented in the browser with the Canvas API.\ngame intended here\n\n\n\n\n    Show shot history:\n  \n    \n      \n      Yours\n    \n  \n    \n      \n      Computer's"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\nTODO: replace the above text with appropriate front-page material."
  }
]