---
title: "Data Wrangling with in Observable With Arquero"
description: "Arquero is a JavaScript library that features a dplyr-like grammar."
author:
  - name: Homer White
date: "2023-11-03"
categories: [Observable, Arquero]
#image: banner.jpg
execute:
  echo: true
---

# Home Run Leaders

## Introduction

As an exercise in data wrangling in Observable, we'll use a few datasets (exported from the R package **Lahman**) to produce an interactive graph of home run leaders in Major League baseball.  We'll use the [Arquero](https://observablehq.com/@uwdata/introducing-arquero) library in order to wrangle our data in a way that should be familiar to users of R's [**tidyverse**](https://www.tidyverse.org/) ecosystem.

Here is the graph we want to make:

```{ojs}
//| echo: false
Plot.plot({
  nice: true,
  x: {label: "Season"},
  y: {label: "Home Runs"},
  marks: [
    Plot.dot(df, {
      x: "jx", 
      y: "jy", 
      fill: "black", fillOpacity: 0.3
    }),
    Plot.tip(df, Plot.pointer({
      x: "jx",
      y: "jy",
      title: d => d.info
    }))
  ]
})
```

## Setup

We import Arquero and a recent version of Plots, and get the necessary datasets.

```{ojs}
import { aq, op } from '@uwdata/arquero'
```

```{ojs}
Plot = import("https://esm.run/@observablehq/plot@0.6.11")
```

In the code below, the Arquero `from()` method converts the data from an array-of-objects format into standard tidy-data format:  object of arrays of the columns of data).  (Arquero wrangles data in the tidy format.)  Interestingly, the `viewof` keeps `b` as a tidy table, even though the table has been passed to Arquero's `view()` method.  I'm not sure why all this happens!

```{ojs}
viewof b = aq.
  from(await FileAttachment('Batting.csv')
    .csv({typed: true})
  )
  .select("playerID", "yearID", "teamID", "HR")
  .view()
```

```{ojs}
viewof p = aq.
  from(await FileAttachment('People.csv')
    .csv({typed: true})
  )
  .select("playerID", "nameFirst", "nameLast", "debut")
  .view()
```

```{ojs}
viewof t = aq.
  from(await FileAttachment('Teams.csv')
    .csv({typed: true})
  )
  .select("teamID", "yearID", "name")
  .view()
```

## Wrangling

Here is where Arquero feels a lot R's **dplyr**:

```{ojs}
hrLeaders = b
  // only for 1900 or later season:
  .filter(d => d.yearID >= 1900)
  // join with Players to get name and debut year:
  .join(p, "playerID")
  // find HR leaders in each season:
  .groupby("yearID")
  // arrange within each season-group:
  .orderby(aq.desc("HR"))
  // take only the top five:
  .slice(0, 5)
  .ungroup()
  // for table display:
  .orderby("yearID", aq.desc("HR"))
```

Let's have a look at the resulting table:

```{ojs}
Inputs.table(hrLeaders)
```

We need to join with the Teams data, and we add a column containing material for the tool tips.  We must also create "jittered" versions of the season and home-run variables, in order to avoid over-plotting.

```{ojs}
df = hrLeaders.
  // Default for join is to use all columns that appear in both tables
  // https://uwdata.github.io/arquero/api/verbs#join .
  // (We are joining on teamID and yearID):
  join(t)
  // rename for more readable graph:
  .rename({yearID: "season"})
  // create a better debut variable:
  .derive(
    // As is, debut is a datetime value.
    // we don't want the time, so we should
    // consider:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString
    // But we must also escape, as per
    // https://uwdata.github.io/arquero/api/#escape .
    // Great background discussion here:
    // https://uwdata.github.io/arquero/api/expressions
    {debutDate: aq.escape(d => d.debut.toDateString())}
  )
  // now assemble the tooltip info:
  .derive(
    {info: d => `Playing for the ${d.name}, ${d.nameFirst} ${d.nameLast}, who debuted on ${d.debutDate}, hit ${d.HR} home runs in ${d.season}.`
    }
  )
  // jitter to avoid over-plotting:
  .derive({
    jx: d => d.season + Math.random() - 0.5,
    jy: d => d.HR + Math.random() - 0.5
  })
```

This is the "glyph-ready" table that is used to make the desired plot.  Let's have a look at it:

```{ojs}
Inputs.table(df)
```

The code for the plot was:

```{ojs}
//| eval: false
Plot.plot({
  nice: true,
  x: {label: "Season"},
  y: {label: "Home Runs"},
  marks: [
    Plot.dot(df, {
      x: "jx", 
      y: "jy", 
      fill: "black", fillOpacity: 0.3
    }),
    Plot.tip(df, Plot.pointer({
      x: "jx",
      y: "jy",
      title: d => d.info
    }))
  ]
})
```




## Note

A first pass at the work is in this Observable notebook:

>[https://observablehq.com/@homerhanumat/home-run-leaders](https://observablehq.com/@homerhanumat/home-run-leaders)

The Arquero functions for file import used in the notebook did not work in the Quarto setting.  (This seems to be another instance where the work is much easier to do in an Observable notebook than in Quarto.)




